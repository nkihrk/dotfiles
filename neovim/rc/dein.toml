############################################################
#
# Utility
#
############################################################

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
	autocmd FileType denite call s:denite_my_settings()
	function! s:denite_my_settings() abort
		nnoremap <silent><buffer><expr> <CR>
		\ denite#do_map('do_action')
		nnoremap <silent><buffer><expr> d
		\ denite#do_map('do_action', 'delete')
		nnoremap <silent><buffer><expr> p
		\ denite#do_map('do_action', 'preview')
		nnoremap <silent><buffer><expr> q
		\ denite#do_map('quit')
		nnoremap <silent><buffer><expr> i
		\ denite#do_map('open_filter_buffer')
		nnoremap <silent><buffer><expr> <Space>
		\ denite#do_map('toggle_select').'j'
	endfunction
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
	let g:deoplete#enable_at_startup = 1
	let g:deoplete#auto_completion_start_length = 1
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['deoplete.nvim', 'neosnippet-snippets']
hook_add = '''
	" Plugin key-mappings.
	" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
	imap <C-k>     <Plug>(neosnippet_expand_or_jump)
	smap <C-k>     <Plug>(neosnippet_expand_or_jump)
	xmap <C-k>     <Plug>(neosnippet_expand_target)

	" SuperTab like snippets behavior.
	" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
	"imap <expr><TAB>
	" \ pumvisible() ? "\<C-n>" :
	" \ neosnippet#expandable_or_jumpable() ?
	" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
	smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
	\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

	" For conceal markers.
	if has('conceal')
	  set conceallevel=2 concealcursor=niv
	endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
	let g:ale_linters = {
		\		'*': ['eslint'],
		\		'python': ['flake8']
		\	}
	let g:ale_fixers = {
		\		'*': ['prettier', 'eslint'],
		\		'python': ['autopep8', 'black', 'isort']
		\	}

	let g:ale_python_flake8_executable = g:python3_host_prog
	let g:ale_python_flake8_options = '-m flake8'
	let g:ale_python_autopep8_executable = g:python3_host_prog
	let g:ale_python_autopep8_options = '-m autopep8'
	let g:ale_python_isort_executable = g:python3_host_prog
	let g:ale_python_isort_options = '-m isort'
	let g:ale_python_black_executable = g:python3_host_prog
	let g:ale_python_black_options = '-m black'

	let g:ale_sign_column_always = 1
	let g:ale_lint_on_save = 1
	let g:ale_fix_on_save = 1
	let g:ale_completion_autoimport = 1
	"let g:ale_lint_on_enter = 1
	"let g:ale_lint_on_text_changed = 'never'
	"let g:ale_lint_on_insert_leave = 0
	"let g:ale_set_highlights = 0

	let g:ale_sign_error = '>>'
	let g:ale_sign_warning = '--'

	" Use ALE as completion sources for all code.
	call deoplete#custom#option('sources', {
		\ '_': ['ale'],
		\})
'''

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'terryma/vim-expand-region'
hook_add = '''
	vmap v <Plug>(expand_region_expand)
	vmap <C-v> <Plug>(expand_region_shrink)
'''

[[plugins]]
repo = 'vim-scripts/gitignore'

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
	let g:ctrlp_map = '<c-p>'
	let g:ctrlp_cmd = 'CtrlP'
	let g:ctrlp_working_path_mode = 'ra'
	let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
	let g:ctrlp_use_caching = 0
	if executable('rg')
		let g:ctrlp_user_command = 'rg --files %s'
		let g:ctrlp_use_caching = 0
		let g:ctrlp_working_path_mode = 'ra'
		let g:ctrlp_switch_buffer = 'et'
	else
		let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
		let g:ctrlp_prompt_mappings = {'AcceptSelection("e")': ['<space>', '<cr>', '<2-LeftMouse>']}
	endif
'''

[[plugins]]
repo = 'Townk/vim-autoclose'

[[plugins]]
repo = 'skywind3000/asyncrun.vim'
hook_add = '''
	let g:asyncrun_open = 10
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'itchyny/vim-cursorword'

[[plugins]]
repo = 'tpope/vim-commentary'



############################################################
#
# GUI
#
############################################################

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
	set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Nerd\ Font\ Complete\ 12
	set encoding=utf-8
	let g:WebDevIconsNerdTreeBeforeGlyphPadding = ""
	let g:WebDevIconsUnicodeDecorateFolderNodes = v:true
	if exists('g:loaded_webdevicons')
		call webdevicons#refresh()
	endif
'''

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = 'let g:rainbow_active = 1'

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
hook_add = '''
	let g:airline_powerline_fonts = 1
	set laststatus=2
	let g:airline_theme = 'minimalist'
'''

[[plugins]]
repo = 'edkolev/tmuxline.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = 'highlight SignColumn guibg=none ctermbg=none'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
	let g:NERDTreeQuitOnOpen=0

	nnoremap <leader>n :NERDTreeFocus<CR>
	nnoremap <C-n> :NERDTree<CR>
	nnoremap <C-t> :NERDTreeToggle<CR>
	nnoremap <C-f> :NERDTreeFind<CR>

	" Exit Vim if NERDTree is the only window left.
	autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() |
	    \ quit | endif
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
depends = ['nerdtree']

[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
depends = ['nerdtree']



